# This is a special configuration file to run tests on Travis-CI via
# GitHub notifications when changes are committed.
#
# For technical details, see http://travis-ci.org/ and this blog post
# for background,
# http://blastedbio.blogspot.com/2013/09/using-travis-ci-for-testing-galaxy-tools.html

# Galaxy currently only supports Python 2.7
language: python
cache: pip
jobs:
  include:
    - stage: lint
      python: "2.7"
      before_install:
        - "if grep -P '\t' *.rst */*/*.rst; then echo 'Tabs are bad, please use four spaces in RST files.'; false; fi"
        - "if grep -P '\t' */*/*.xml; then echo 'Tabs are bad, please use four spaces in XML files.'; false; fi"
        - "if grep -P '\t' */*/.shed.yml; then echo 'Tabs are bad, please use four spaces in shed YAML files.'; false; fi"
        - "if grep -n -r '[[:blank:]]$' *.rst */*/*.rst; then echo 'Please remove trailing whitespace in RST files.'; false; fi"
        - "if grep -n -r '[[:blank:]]$' */*/*.xml; then echo 'Please remove trailing whitespace in XML files.'; false; fi"
        - "if grep -n -r '[[:blank:]]$' */*/.shed.yml; then echo 'Please remove trailing whitespace in shed YAML files.'; false; fi"
      install:
        - pip install --upgrade pip setuptools
        - pip install flake8 flake8-blind-except flake8-docstrings flake8-rst-docstrings restructuredtext-lint
        - echo "Using flake8 to check Python code"
        - flake8 .
        - echo "Using restructuredtext-lint to check our RST files"
        - restructuredtext-lint .
        - pip install planemo
      script:
        - echo "Using planemo lint to check for obvious tool errors"
        - planemo shed_lint --tools --fail_level error --ensure_metadata -r ${TRAVIS_BUILD_DIR}
    - stage: test
      python: "2.7"
      env: GALAXY_BRANCH=master
    - stage: test
      python: "2.7"
      env: GALAXY_BRANCH=dev
    - stage: deploy
      before_install:
        - echo "Removing tools we're not testing or deploying"
        - for line in $(cat .tt_skip); do rm -rf $line; done
        - for line in $(cat .deploy_skip); do rm -rf $line; done
      install:
        - pip install --upgrade pip setuptools
        - pip install planemo
      script:
        - if [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TRAVIS_BRANCH" == "master" ]; then planemo shed_update --shed_target testtoolshed --force_repository_creation --check_diff --shed_key_from_env TTS_KEY -r datatypes/ tools/ workflows/; fi

# Deployment
# ==========
# This is done with the new TravisCI stages feature, see
# https://blog.travis-ci.com/2017-05-11-introducing-build-stages
#
# Assumes you have set $TTS_KEY in the TravisCI interface,
# and that the test stage passed.
#
# As the deploy is run on a new VM, remove black-listed tools.
#
#
# Planemo Lint
# ============
#
# Planemo can be run to check tools separately from Galaxy, and this
# is fast so we do it *before* the slow process of installing Galaxy
# and running the tool tests.
#
#
# Installing Galaxy
# =================
#
# We want to test with specific branches of Galaxy, so we install it.
#
# Installing Tool Dependencies
# ============================
#
# We also need to install our tool dependencies, e.g. samtools binaries,
# which we will do manually rather than via a (local) Galaxy Tool Shed.
# Tool dependencies defined in this repository can be installed via
# "planemo dependency_script", however we still have to worry about
# dependencies normally done via the Tool Shed (e.g. Biopython,
# mummer) or assumed to be present by Galaxy itself (e.g. samtools).

before_install:
 - pip install --upgrade pip setuptools
 - pip install planemo requests
 - echo "Removing tools we're not going to test"
 - for line in $(cat .tt_skip); do rm -rf $line; done
 - echo "Fixing permissions on Python eggs cache folder"
 - mkdir -p "$HOME/.python-eggs"
 - chmod 700 "$HOME/.python-eggs" 
 - echo "Downloading and setting up dependencies..."
 - export INSTALL_DIR=/tmp/dep_install && mkdir $INSTALL_DIR
 - export DOWNLOAD_CACHE=/tmp/download_cache && mkdir $DOWNLOAD_CACHE
 - planemo dependency_script -r ${TRAVIS_BUILD_DIR}/packages/ ${TRAVIS_BUILD_DIR}/tools/
 - bash dep_install.sh
 - source env.sh
 - echo "Installing matplotlib_venn"
 - pip install matplotlib_venn
 - echo "Installing MUMmer and its dependencies..."
 - sudo apt-get -qq update
 - sudo apt-get install -y gnuplot ghostscript
 - cd ${TRAVIS_BUILD_DIR}
 - wget http://downloads.sourceforge.net/project/mummer/mummer/3.23/MUMmer3.23.tar.gz
 - tar -zxvf MUMmer3.23.tar.gz
 - cd MUMmer3.23 && make check && make install
 - export PATH=$PWD:$PATH
 - echo "Installing samtools..."
 - cd ${TRAVIS_BUILD_DIR} && mkdir samtools && cd samtools
 - wget http://depot.galaxyproject.org/package/linux/x86_64/samtools/samtools-0.1.19-Linux-x86_64.tgz
 - tar -zxvf samtools-0.1.19-Linux-x86_64.tgz
 - export PATH=$PWD/bin/:$PATH
 - echo "Fetching Galaxy ${GALAXY_BRANCH} branch..."
 - cd ${TRAVIS_BUILD_DIR}
 - wget https://codeload.github.com/galaxyproject/galaxy/tar.gz/${GALAXY_BRANCH}
 - tar -zxvf ${GALAXY_BRANCH} | tail
 - cd galaxy-${GALAXY_BRANCH}
 - echo "Getting Galaxy to install our Python dependencies..."
 - echo biopython >> requirements.txt


# Configuring tools within Galaxy
# ===============================
#
# We don't have any special datatypes, and planemo should take care
# of all the test files...
#
# Note https://github.com/galaxyproject/planemo/issues/530 workaround

install:
 - cd ${TRAVIS_BUILD_DIR}/galaxy-${GALAXY_BRANCH}
 - export GALAXY_TEST_UPLOAD_ASYNC=false
 - export GALAXY_TEST_DB_TEMPLATE=https://github.com/jmchilton/galaxy-downloads/raw/master/db_gx_rev_0127.sqlite
 # Explicitly use sample files to generate default *.loc files
 - for f in ${TRAVIS_BUILD_DIR}/tool-data/*.loc.sample; do cp "$f" "${f%.sample}"; done
 # Then explicitly override them with any non-sample *.loc files
 - cp ${TRAVIS_BUILD_DIR}/tool-data/*.loc ${TRAVIS_BUILD_DIR}/galaxy-${GALAXY_BRANCH}/tool-data/
 # Then explicitly override them with any test *.loc files
 # - cp ${TRAVIS_BUILD_DIR}/test-data/*.loc ${TRAVIS_BUILD_DIR}/galaxy-${GALAXY_BRANCH}/tool-data/

# Testing tools in Galaxy
# =======================
#
# Having setup our Galaxy, and tools, now just call planemo test.

script:
 - cd ${TRAVIS_BUILD_DIR}
 - planemo --version
 - planemo test --no_dependency_resolution --galaxy_root ${TRAVIS_BUILD_DIR}/galaxy-${GALAXY_BRANCH} --skip_venv tools/

notifications:
  email: false
